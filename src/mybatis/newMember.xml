<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="test">
 	<!-- id속성값은 식별자 : 보통 메소드이름과 동일하게 합니다. 
 	sql 실행에 필요한 값들에 대해 자바클래스와 테이블의 컬럼을 매핑하여 처리합니다.
 	1)값 대입할 ? 는 el 기호 #{}로 변경합니다. -> sql문을 먼저 파싱(컴파일)한 후 실행할때 대입되는 기호
 	2)값 대입할 형식을 parameterType속성에 설정합니다.(패키지명.클래스명 형식)
 	3)sql실행결과 매핑될 데이터 타입을 resultType으로 설정합니다.(패키지명.클래스명 형식)
 	-->
	<!-- 파라미터타입이 클래스일때 #{} 는 프로퍼티이름을 정확히 대소문자 구분하여 작성하세요. 
		여기서의 프로퍼티 이름은 vo 클래스의 변수명입니다.
	-->
	<!-- insert, update, delete는 자동으로 return 값이 생성 -->
 	<insert id="insert" parameterType="org.iclass.vo.NewMember" >
 		INSERT INTO new_member 
		VALUES (#{id},#{name},#{password},#{email},#{age},#{gender},#{hobbies},sysdate)
 	</insert>
 	
 	<update id="update" parameterType="org.iclass.vo.NewMember">
	 	UPDATE new_member
		SET email=#{email}, hobbies=#{hobbies} 
		WHERE id=#{id}
 	</update>
 	
 	<delete id="delete" parameterType="String">
 		DELETE FROM new_member 
 		WHERE id=#{id}
 	</delete>
 	
 	
 	<!-- select 실행결과를 자동으로 NewMember 객체를 생성해서 매핑을 합니다. -->
 	<select id="selectOne" parameterType="String" resultType="org.iclass.vo.NewMember">
 		SELECT * FROM new_member WHERE id=#{id}
 	</select>
 	
 	<!-- select 실행결과가 여러행이 되는 List인 경우에는 <T>에 해당하는 제너릭타입을 설정합니다. -->
 	<!-- select 조회 column과 NewMember 자바 객체의 필드를 매핑 -->
 	<select id="selectAll" resultType="org.iclass.vo.NewMember">
 		SELECT * FROM new_member
 	</select>	
 	
 	<!-- *로그인 테스트. -->
 	<select id="login" parameterType="java.util.Map" resultType="org.iclass.vo.NewMember">	
 	<!-- key 이름 : "id", "password" 2개를 저장한 Map -->
 		SELECT id,name,email FROM new_member  
 		WHERE id=#{id} and password=#{password}
 	</select>
 	
 	<!-- 테스트 검색 -->
 	<select id="searchName" parameterType="String" resultType="org.iclass.vo.NewMember">
 		SELECT * FROM new_member 
 		WHERE name like '%'||#{find}||'%'
 	</select>
 	<!-- 동적쿼리 검색 -->
 	<!-- if문이 참인 것은 1개, 참인 경우에 해당하는 where 추가 -->
 	<select id="search" parameterType="java.util.Map" resultType="org.iclass.vo.NewMember">
 		SELECT * FROM new_member 
	 	<if test="column=='id'">
	 		WHERE id like '%'||#{find}||'%'	<!-- || : 문자열 연결 연산 -->
	 	</if>
	 	<if test="column=='email'">
	 		WHERE email like '%'||#{find}||'%'
	 	</if>
	 	<if test="column=='name'">
	 		WHERE name like '%'||#{find}||'%'
	 	</if>
	 	<if test="column=='hobbies'">
	 		WHERE hobbies=#{find}
	 	</if>
 	</select>	
 	<!-- Map에 저장된 key 이름 : find, column -->
 	<!-- column 키의 값은 table의 column명으로 하거나 규칙 설정 -->
 	
 </mapper>
 
 
 
 
 
 